/*
 * generated by Xtext 2.12.0
 */
package org.xtext.editor.alda.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import org.xtext.editor.alda.alda.AldaPackage;
import org.xtext.editor.alda.alda.COMMENT;
import org.xtext.editor.alda.alda.INSTRUMENTS;
import org.xtext.editor.alda.alda.KeySignature;
import org.xtext.editor.alda.alda.Model;
import org.xtext.editor.alda.alda.Quant;
import org.xtext.editor.alda.alda.Tempo;
import org.xtext.editor.alda.alda.Volume;
import org.xtext.editor.alda.services.AldaGrammarAccess;

@SuppressWarnings("all")
public class AldaSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private AldaGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == AldaPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case AldaPackage.COMMENT:
				sequence_COMMENT(context, (COMMENT) semanticObject); 
				return; 
			case AldaPackage.INSTRUMENTS:
				sequence_INSTRUMENTS(context, (INSTRUMENTS) semanticObject); 
				return; 
			case AldaPackage.KEY_SIGNATURE:
				sequence_KeySignature(context, (KeySignature) semanticObject); 
				return; 
			case AldaPackage.MODEL:
				sequence_Model(context, (Model) semanticObject); 
				return; 
			case AldaPackage.QUANT:
				sequence_Quant(context, (Quant) semanticObject); 
				return; 
			case AldaPackage.TEMPO:
				sequence_Tempo(context, (Tempo) semanticObject); 
				return; 
			case AldaPackage.VOLUME:
				sequence_Volume(context, (Volume) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     DECLRATIONS returns COMMENT
	 *     COMMENT returns COMMENT
	 *
	 * Constraint:
	 *     name=STRING
	 */
	protected void sequence_COMMENT(ISerializationContext context, COMMENT semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, AldaPackage.Literals.COMMENT__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AldaPackage.Literals.COMMENT__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getCOMMENTAccess().getNameSTRINGTerminalRuleCall_2_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     INSTRUMENTS returns INSTRUMENTS
	 *
	 * Constraint:
	 *     name=NOTES
	 */
	protected void sequence_INSTRUMENTS(ISerializationContext context, INSTRUMENTS semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, AldaPackage.Literals.INSTRUMENTS__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AldaPackage.Literals.INSTRUMENTS__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getINSTRUMENTSAccess().getNameNOTESTerminalRuleCall_4_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     DECLRATIONS returns KeySignature
	 *     KeySignature returns KeySignature
	 *
	 * Constraint:
	 *     name=NOTES
	 */
	protected void sequence_KeySignature(ISerializationContext context, KeySignature semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, AldaPackage.Literals.KEY_SIGNATURE__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AldaPackage.Literals.KEY_SIGNATURE__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getKeySignatureAccess().getNameNOTESTerminalRuleCall_3_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Model returns Model
	 *
	 * Constraint:
	 *     ((declarations+=DECLRATIONS+ instruments+=INSTRUMENTS+) | instruments+=INSTRUMENTS+)?
	 */
	protected void sequence_Model(ISerializationContext context, Model semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     DECLRATIONS returns Quant
	 *     Quant returns Quant
	 *
	 * Constraint:
	 *     name=INT
	 */
	protected void sequence_Quant(ISerializationContext context, Quant semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, AldaPackage.Literals.QUANT__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AldaPackage.Literals.QUANT__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getQuantAccess().getNameINTTerminalRuleCall_3_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     DECLRATIONS returns Tempo
	 *     Tempo returns Tempo
	 *
	 * Constraint:
	 *     name=INT
	 */
	protected void sequence_Tempo(ISerializationContext context, Tempo semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, AldaPackage.Literals.TEMPO__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AldaPackage.Literals.TEMPO__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getTempoAccess().getNameINTTerminalRuleCall_3_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     DECLRATIONS returns Volume
	 *     Volume returns Volume
	 *
	 * Constraint:
	 *     name=INT
	 */
	protected void sequence_Volume(ISerializationContext context, Volume semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, AldaPackage.Literals.VOLUME__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AldaPackage.Literals.VOLUME__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getVolumeAccess().getNameINTTerminalRuleCall_3_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
}
