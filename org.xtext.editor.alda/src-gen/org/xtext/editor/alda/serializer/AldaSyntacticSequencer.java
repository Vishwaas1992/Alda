/*
 * generated by Xtext 2.10.0
 */
package org.xtext.editor.alda.serializer;

import com.google.inject.Inject;
import java.util.List;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.IGrammarAccess;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.nodemodel.INode;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AbstractElementAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.GroupAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.TokenAlias;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynNavigable;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynTransition;
import org.eclipse.xtext.serializer.sequencer.AbstractSyntacticSequencer;
import org.xtext.editor.alda.services.AldaGrammarAccess;

@SuppressWarnings("all")
public class AldaSyntacticSequencer extends AbstractSyntacticSequencer {

	protected AldaGrammarAccess grammarAccess;
	protected AbstractElementAlias match_INSTRUMENTS_Control000aKeyword_3_a;
	protected AbstractElementAlias match_INSTRUMENTS___SolidusKeyword_1_0_INSTRUMENTParserRuleCall_1_1__a;
	protected AbstractElementAlias match_KeySignature_ExclamationMarkKeyword_2_q;
	protected AbstractElementAlias match_Quant_ExclamationMarkKeyword_2_q;
	protected AbstractElementAlias match_Tempo_ExclamationMarkKeyword_2_q;
	protected AbstractElementAlias match_Volume_ExclamationMarkKeyword_2_q;
	
	@Inject
	protected void init(IGrammarAccess access) {
		grammarAccess = (AldaGrammarAccess) access;
		match_INSTRUMENTS_Control000aKeyword_3_a = new TokenAlias(true, true, grammarAccess.getINSTRUMENTSAccess().getControl000aKeyword_3());
		match_INSTRUMENTS___SolidusKeyword_1_0_INSTRUMENTParserRuleCall_1_1__a = new GroupAlias(true, true, new TokenAlias(false, false, grammarAccess.getINSTRUMENTSAccess().getSolidusKeyword_1_0()), new TokenAlias(false, false, grammarAccess.getINSTRUMENTSAccess().getINSTRUMENTParserRuleCall_1_1()));
		match_KeySignature_ExclamationMarkKeyword_2_q = new TokenAlias(false, true, grammarAccess.getKeySignatureAccess().getExclamationMarkKeyword_2());
		match_Quant_ExclamationMarkKeyword_2_q = new TokenAlias(false, true, grammarAccess.getQuantAccess().getExclamationMarkKeyword_2());
		match_Tempo_ExclamationMarkKeyword_2_q = new TokenAlias(false, true, grammarAccess.getTempoAccess().getExclamationMarkKeyword_2());
		match_Volume_ExclamationMarkKeyword_2_q = new TokenAlias(false, true, grammarAccess.getVolumeAccess().getExclamationMarkKeyword_2());
	}
	
	@Override
	protected String getUnassignedRuleCallToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (ruleCall.getRule() == grammarAccess.getINSTRUMENTRule())
			return getINSTRUMENTToken(semanticObject, ruleCall, node);
		return "";
	}
	
	/**
	 * INSTRUMENT:
	 *     'piano'|'violin'|'flute'
	 * ;
	 */
	protected String getINSTRUMENTToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "piano";
	}
	
	@Override
	protected void emitUnassignedTokens(EObject semanticObject, ISynTransition transition, INode fromNode, INode toNode) {
		if (transition.getAmbiguousSyntaxes().isEmpty()) return;
		List<INode> transitionNodes = collectNodes(fromNode, toNode);
		for (AbstractElementAlias syntax : transition.getAmbiguousSyntaxes()) {
			List<INode> syntaxNodes = getNodesFor(transitionNodes, syntax);
			if (match_INSTRUMENTS_Control000aKeyword_3_a.equals(syntax))
				emit_INSTRUMENTS_Control000aKeyword_3_a(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_INSTRUMENTS___SolidusKeyword_1_0_INSTRUMENTParserRuleCall_1_1__a.equals(syntax))
				emit_INSTRUMENTS___SolidusKeyword_1_0_INSTRUMENTParserRuleCall_1_1__a(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_KeySignature_ExclamationMarkKeyword_2_q.equals(syntax))
				emit_KeySignature_ExclamationMarkKeyword_2_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Quant_ExclamationMarkKeyword_2_q.equals(syntax))
				emit_Quant_ExclamationMarkKeyword_2_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Tempo_ExclamationMarkKeyword_2_q.equals(syntax))
				emit_Tempo_ExclamationMarkKeyword_2_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Volume_ExclamationMarkKeyword_2_q.equals(syntax))
				emit_Volume_ExclamationMarkKeyword_2_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else acceptNodes(getLastNavigableState(), syntaxNodes);
		}
	}

	/**
	 * Ambiguous syntax:
	 *     '
	  *     '*
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) INSTRUMENT ('/' INSTRUMENT)* ':' (ambiguity) name=NOTES
	 */
	protected void emit_INSTRUMENTS_Control000aKeyword_3_a(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ('/' INSTRUMENT)*
	 *
	 * This ambiguous syntax occurs at:
	 *     (
	 *         (rule start) 
	 *         INSTRUMENT 
	 *         (ambiguity) 
	 *         ':' 
	 *         '
	 *         '* 
	 *         name=NOTES
	 *     )
	 */
	protected void emit_INSTRUMENTS___SolidusKeyword_1_0_INSTRUMENTParserRuleCall_1_1__a(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     '!'?
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) '(' 'key-signature' (ambiguity) name=NOTES
	 */
	protected void emit_KeySignature_ExclamationMarkKeyword_2_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     '!'?
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) '(' 'quant' (ambiguity) name=INT
	 */
	protected void emit_Quant_ExclamationMarkKeyword_2_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     '!'?
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) '(' 'tempo' (ambiguity) name=INT
	 */
	protected void emit_Tempo_ExclamationMarkKeyword_2_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     '!'?
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) '(' 'volume' (ambiguity) name=INT
	 */
	protected void emit_Volume_ExclamationMarkKeyword_2_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
}
