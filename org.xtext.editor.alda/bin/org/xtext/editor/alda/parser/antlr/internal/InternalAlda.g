/*
 * generated by Xtext 2.12.0
 */
grammar InternalAlda;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package org.xtext.editor.alda.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.xtext.editor.alda.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.xtext.editor.alda.services.AldaGrammarAccess;

}

@parser::members {

 	private AldaGrammarAccess grammarAccess;

    public InternalAldaParser(TokenStream input, AldaGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "Model";
   	}

   	@Override
   	protected AldaGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleModel
entryRuleModel returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getModelRule()); }
	iv_ruleModel=ruleModel
	{ $current=$iv_ruleModel.current; }
	EOF;

// Rule Model
ruleModel returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getModelAccess().getDeclarationsDECLRATIONSParserRuleCall_0_0());
				}
				lv_declarations_0_0=ruleDECLRATIONS
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getModelRule());
					}
					add(
						$current,
						"declarations",
						lv_declarations_0_0,
						"org.xtext.editor.alda.Alda.DECLRATIONS");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		(
			(
				{
					newCompositeNode(grammarAccess.getModelAccess().getInstrumentsINSTRUMENTSParserRuleCall_1_0());
				}
				lv_instruments_1_0=ruleINSTRUMENTS
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getModelRule());
					}
					add(
						$current,
						"instruments",
						lv_instruments_1_0,
						"org.xtext.editor.alda.Alda.INSTRUMENTS");
					afterParserOrEnumRuleCall();
				}
			)
		)*
	)
;

// Entry rule entryRuleDECLRATIONS
entryRuleDECLRATIONS returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDECLRATIONSRule()); }
	iv_ruleDECLRATIONS=ruleDECLRATIONS
	{ $current=$iv_ruleDECLRATIONS.current; }
	EOF;

// Rule DECLRATIONS
ruleDECLRATIONS returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getDECLRATIONSAccess().getTempoParserRuleCall_0());
		}
		this_Tempo_0=ruleTempo
		{
			$current = $this_Tempo_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getDECLRATIONSAccess().getQuantParserRuleCall_1());
		}
		this_Quant_1=ruleQuant
		{
			$current = $this_Quant_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getDECLRATIONSAccess().getVolumeParserRuleCall_2());
		}
		this_Volume_2=ruleVolume
		{
			$current = $this_Volume_2.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getDECLRATIONSAccess().getKeySignatureParserRuleCall_3());
		}
		this_KeySignature_3=ruleKeySignature
		{
			$current = $this_KeySignature_3.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getDECLRATIONSAccess().getCOMMENTParserRuleCall_4());
		}
		this_COMMENT_4=ruleCOMMENT
		{
			$current = $this_COMMENT_4.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleCOMMENT
entryRuleCOMMENT returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getCOMMENTRule()); }
	iv_ruleCOMMENT=ruleCOMMENT
	{ $current=$iv_ruleCOMMENT.current; }
	EOF;

// Rule COMMENT
ruleCOMMENT returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='('
		{
			newLeafNode(otherlv_0, grammarAccess.getCOMMENTAccess().getLeftParenthesisKeyword_0());
		}
		otherlv_1='comment'
		{
			newLeafNode(otherlv_1, grammarAccess.getCOMMENTAccess().getCommentKeyword_1());
		}
		(
			(
				lv_name_2_0=RULE_STRING
				{
					newLeafNode(lv_name_2_0, grammarAccess.getCOMMENTAccess().getNameSTRINGTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getCOMMENTRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_2_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
		otherlv_3=')'
		{
			newLeafNode(otherlv_3, grammarAccess.getCOMMENTAccess().getRightParenthesisKeyword_3());
		}
	)
;

// Entry rule entryRuleINSTRUMENTS
entryRuleINSTRUMENTS returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getINSTRUMENTSRule()); }
	iv_ruleINSTRUMENTS=ruleINSTRUMENTS
	{ $current=$iv_ruleINSTRUMENTS.current; }
	EOF;

// Rule INSTRUMENTS
ruleINSTRUMENTS returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getINSTRUMENTSAccess().getINSTRUMENTParserRuleCall_0());
		}
		ruleINSTRUMENT
		{
			afterParserOrEnumRuleCall();
		}
		(
			otherlv_1='/'
			{
				newLeafNode(otherlv_1, grammarAccess.getINSTRUMENTSAccess().getSolidusKeyword_1_0());
			}
			{
				newCompositeNode(grammarAccess.getINSTRUMENTSAccess().getINSTRUMENTParserRuleCall_1_1());
			}
			ruleINSTRUMENT
			{
				afterParserOrEnumRuleCall();
			}
		)*
		otherlv_3=':'
		{
			newLeafNode(otherlv_3, grammarAccess.getINSTRUMENTSAccess().getColonKeyword_2());
		}
		(
			otherlv_4='\n'
			{
				newLeafNode(otherlv_4, grammarAccess.getINSTRUMENTSAccess().getLineFeedKeyword_3());
			}
		)*
		(
			(
				lv_name_5_0=RULE_NOTES
				{
					newLeafNode(lv_name_5_0, grammarAccess.getINSTRUMENTSAccess().getNameNOTESTerminalRuleCall_4_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getINSTRUMENTSRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_5_0,
						"org.xtext.editor.alda.Alda.NOTES");
				}
			)
		)
	)
;

// Entry rule entryRuleINSTRUMENT
entryRuleINSTRUMENT returns [String current=null]:
	{ newCompositeNode(grammarAccess.getINSTRUMENTRule()); }
	iv_ruleINSTRUMENT=ruleINSTRUMENT
	{ $current=$iv_ruleINSTRUMENT.current.getText(); }
	EOF;

// Rule INSTRUMENT
ruleINSTRUMENT returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='piano'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getINSTRUMENTAccess().getPianoKeyword_0());
		}
		    |
		kw='violin'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getINSTRUMENTAccess().getViolinKeyword_1());
		}
		    |
		kw='flute'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getINSTRUMENTAccess().getFluteKeyword_2());
		}
	)
;

// Entry rule entryRuleTempo
entryRuleTempo returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTempoRule()); }
	iv_ruleTempo=ruleTempo
	{ $current=$iv_ruleTempo.current; }
	EOF;

// Rule Tempo
ruleTempo returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='('
		{
			newLeafNode(otherlv_0, grammarAccess.getTempoAccess().getLeftParenthesisKeyword_0());
		}
		otherlv_1='tempo'
		{
			newLeafNode(otherlv_1, grammarAccess.getTempoAccess().getTempoKeyword_1());
		}
		(
			otherlv_2='!'
			{
				newLeafNode(otherlv_2, grammarAccess.getTempoAccess().getExclamationMarkKeyword_2());
			}
		)?
		(
			(
				lv_name_3_0=RULE_INT
				{
					newLeafNode(lv_name_3_0, grammarAccess.getTempoAccess().getNameINTTerminalRuleCall_3_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getTempoRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_3_0,
						"org.eclipse.xtext.common.Terminals.INT");
				}
			)
		)
		otherlv_4=')'
		{
			newLeafNode(otherlv_4, grammarAccess.getTempoAccess().getRightParenthesisKeyword_4());
		}
	)
;

// Entry rule entryRuleQuant
entryRuleQuant returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getQuantRule()); }
	iv_ruleQuant=ruleQuant
	{ $current=$iv_ruleQuant.current; }
	EOF;

// Rule Quant
ruleQuant returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='('
		{
			newLeafNode(otherlv_0, grammarAccess.getQuantAccess().getLeftParenthesisKeyword_0());
		}
		otherlv_1='quant'
		{
			newLeafNode(otherlv_1, grammarAccess.getQuantAccess().getQuantKeyword_1());
		}
		(
			otherlv_2='!'
			{
				newLeafNode(otherlv_2, grammarAccess.getQuantAccess().getExclamationMarkKeyword_2());
			}
		)?
		(
			(
				lv_name_3_0=RULE_INT
				{
					newLeafNode(lv_name_3_0, grammarAccess.getQuantAccess().getNameINTTerminalRuleCall_3_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getQuantRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_3_0,
						"org.eclipse.xtext.common.Terminals.INT");
				}
			)
		)
		otherlv_4=')'
		{
			newLeafNode(otherlv_4, grammarAccess.getQuantAccess().getRightParenthesisKeyword_4());
		}
	)
;

// Entry rule entryRuleVolume
entryRuleVolume returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getVolumeRule()); }
	iv_ruleVolume=ruleVolume
	{ $current=$iv_ruleVolume.current; }
	EOF;

// Rule Volume
ruleVolume returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='('
		{
			newLeafNode(otherlv_0, grammarAccess.getVolumeAccess().getLeftParenthesisKeyword_0());
		}
		otherlv_1='volume'
		{
			newLeafNode(otherlv_1, grammarAccess.getVolumeAccess().getVolumeKeyword_1());
		}
		(
			otherlv_2='!'
			{
				newLeafNode(otherlv_2, grammarAccess.getVolumeAccess().getExclamationMarkKeyword_2());
			}
		)?
		(
			(
				lv_name_3_0=RULE_INT
				{
					newLeafNode(lv_name_3_0, grammarAccess.getVolumeAccess().getNameINTTerminalRuleCall_3_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getVolumeRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_3_0,
						"org.eclipse.xtext.common.Terminals.INT");
				}
			)
		)
		otherlv_4=')'
		{
			newLeafNode(otherlv_4, grammarAccess.getVolumeAccess().getRightParenthesisKeyword_4());
		}
	)
;

// Entry rule entryRuleKeySignature
entryRuleKeySignature returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getKeySignatureRule()); }
	iv_ruleKeySignature=ruleKeySignature
	{ $current=$iv_ruleKeySignature.current; }
	EOF;

// Rule KeySignature
ruleKeySignature returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='('
		{
			newLeafNode(otherlv_0, grammarAccess.getKeySignatureAccess().getLeftParenthesisKeyword_0());
		}
		otherlv_1='key-signature'
		{
			newLeafNode(otherlv_1, grammarAccess.getKeySignatureAccess().getKeySignatureKeyword_1());
		}
		(
			otherlv_2='!'
			{
				newLeafNode(otherlv_2, grammarAccess.getKeySignatureAccess().getExclamationMarkKeyword_2());
			}
		)?
		(
			(
				lv_name_3_0=RULE_NOTES
				{
					newLeafNode(lv_name_3_0, grammarAccess.getKeySignatureAccess().getNameNOTESTerminalRuleCall_3_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getKeySignatureRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_3_0,
						"org.xtext.editor.alda.Alda.NOTES");
				}
			)
		)
		otherlv_4=')'
		{
			newLeafNode(otherlv_4, grammarAccess.getKeySignatureAccess().getRightParenthesisKeyword_4());
		}
	)
;

RULE_ML_COMMENT : '#' ( options {greedy=false;} : . )*'\n';

RULE_NOTES : (('o'|'r') ('1'..'9')* ' ')? ('a'|'b'|'c'|'d'|'e'|'f'|'g') ('-'|'+')? ('1'..'9')* ('~'|'/'|'.'|' '|'|'|'*'|'<'|'>'|'-'|'.~' '1'..'9')* ((('o'|'r') ('1'..'9')* ' ')? ('a'|'b'|'c'|'d'|'e'|'f'|'g') ('-'|'+')? ('1'..'9')* ('~'|'/'|'.'|' '|'|'|'*'|'<'|'>'|'-'|'.~' '1'..'9')*)*;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
