/*
 * generated by Xtext 2.12.0
 */
grammar InternalAlda;

options {
	superClass=AbstractInternalContentAssistParser;
}

@lexer::header {
package org.xtext.editor.alda.ide.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package org.xtext.editor.alda.ide.contentassist.antlr.internal;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.DFA;
import org.xtext.editor.alda.services.AldaGrammarAccess;

}
@parser::members {
	private AldaGrammarAccess grammarAccess;

	public void setGrammarAccess(AldaGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}

	@Override
	protected Grammar getGrammar() {
		return grammarAccess.getGrammar();
	}

	@Override
	protected String getValueForTokenName(String tokenName) {
		return tokenName;
	}
}

// Entry rule entryRuleModel
entryRuleModel
:
{ before(grammarAccess.getModelRule()); }
	 ruleModel
{ after(grammarAccess.getModelRule()); } 
	 EOF 
;

// Rule Model
ruleModel 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getModelAccess().getGroup()); }
		(rule__Model__Group__0)
		{ after(grammarAccess.getModelAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleDECLRATIONS
entryRuleDECLRATIONS
:
{ before(grammarAccess.getDECLRATIONSRule()); }
	 ruleDECLRATIONS
{ after(grammarAccess.getDECLRATIONSRule()); } 
	 EOF 
;

// Rule DECLRATIONS
ruleDECLRATIONS 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getDECLRATIONSAccess().getAlternatives()); }
		(rule__DECLRATIONS__Alternatives)
		{ after(grammarAccess.getDECLRATIONSAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleCOMMENT
entryRuleCOMMENT
:
{ before(grammarAccess.getCOMMENTRule()); }
	 ruleCOMMENT
{ after(grammarAccess.getCOMMENTRule()); } 
	 EOF 
;

// Rule COMMENT
ruleCOMMENT 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getCOMMENTAccess().getGroup()); }
		(rule__COMMENT__Group__0)
		{ after(grammarAccess.getCOMMENTAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleINSTRUMENTS
entryRuleINSTRUMENTS
:
{ before(grammarAccess.getINSTRUMENTSRule()); }
	 ruleINSTRUMENTS
{ after(grammarAccess.getINSTRUMENTSRule()); } 
	 EOF 
;

// Rule INSTRUMENTS
ruleINSTRUMENTS 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getINSTRUMENTSAccess().getGroup()); }
		(rule__INSTRUMENTS__Group__0)
		{ after(grammarAccess.getINSTRUMENTSAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleINSTRUMENT
entryRuleINSTRUMENT
:
{ before(grammarAccess.getINSTRUMENTRule()); }
	 ruleINSTRUMENT
{ after(grammarAccess.getINSTRUMENTRule()); } 
	 EOF 
;

// Rule INSTRUMENT
ruleINSTRUMENT 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getINSTRUMENTAccess().getAlternatives()); }
		(rule__INSTRUMENT__Alternatives)
		{ after(grammarAccess.getINSTRUMENTAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleTempo
entryRuleTempo
:
{ before(grammarAccess.getTempoRule()); }
	 ruleTempo
{ after(grammarAccess.getTempoRule()); } 
	 EOF 
;

// Rule Tempo
ruleTempo 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getTempoAccess().getGroup()); }
		(rule__Tempo__Group__0)
		{ after(grammarAccess.getTempoAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleQuant
entryRuleQuant
:
{ before(grammarAccess.getQuantRule()); }
	 ruleQuant
{ after(grammarAccess.getQuantRule()); } 
	 EOF 
;

// Rule Quant
ruleQuant 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getQuantAccess().getGroup()); }
		(rule__Quant__Group__0)
		{ after(grammarAccess.getQuantAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleVolume
entryRuleVolume
:
{ before(grammarAccess.getVolumeRule()); }
	 ruleVolume
{ after(grammarAccess.getVolumeRule()); } 
	 EOF 
;

// Rule Volume
ruleVolume 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getVolumeAccess().getGroup()); }
		(rule__Volume__Group__0)
		{ after(grammarAccess.getVolumeAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleKeySignature
entryRuleKeySignature
:
{ before(grammarAccess.getKeySignatureRule()); }
	 ruleKeySignature
{ after(grammarAccess.getKeySignatureRule()); } 
	 EOF 
;

// Rule KeySignature
ruleKeySignature 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getKeySignatureAccess().getGroup()); }
		(rule__KeySignature__Group__0)
		{ after(grammarAccess.getKeySignatureAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__DECLRATIONS__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDECLRATIONSAccess().getTempoParserRuleCall_0()); }
		ruleTempo
		{ after(grammarAccess.getDECLRATIONSAccess().getTempoParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getDECLRATIONSAccess().getQuantParserRuleCall_1()); }
		ruleQuant
		{ after(grammarAccess.getDECLRATIONSAccess().getQuantParserRuleCall_1()); }
	)
	|
	(
		{ before(grammarAccess.getDECLRATIONSAccess().getVolumeParserRuleCall_2()); }
		ruleVolume
		{ after(grammarAccess.getDECLRATIONSAccess().getVolumeParserRuleCall_2()); }
	)
	|
	(
		{ before(grammarAccess.getDECLRATIONSAccess().getKeySignatureParserRuleCall_3()); }
		ruleKeySignature
		{ after(grammarAccess.getDECLRATIONSAccess().getKeySignatureParserRuleCall_3()); }
	)
	|
	(
		{ before(grammarAccess.getDECLRATIONSAccess().getCOMMENTParserRuleCall_4()); }
		ruleCOMMENT
		{ after(grammarAccess.getDECLRATIONSAccess().getCOMMENTParserRuleCall_4()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__INSTRUMENT__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getINSTRUMENTAccess().getPianoKeyword_0()); }
		'piano'
		{ after(grammarAccess.getINSTRUMENTAccess().getPianoKeyword_0()); }
	)
	|
	(
		{ before(grammarAccess.getINSTRUMENTAccess().getViolinKeyword_1()); }
		'violin'
		{ after(grammarAccess.getINSTRUMENTAccess().getViolinKeyword_1()); }
	)
	|
	(
		{ before(grammarAccess.getINSTRUMENTAccess().getFluteKeyword_2()); }
		'flute'
		{ after(grammarAccess.getINSTRUMENTAccess().getFluteKeyword_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Model__Group__0__Impl
	rule__Model__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getModelAccess().getDeclarationsAssignment_0()); }
	(rule__Model__DeclarationsAssignment_0)*
	{ after(grammarAccess.getModelAccess().getDeclarationsAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Model__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getModelAccess().getInstrumentsAssignment_1()); }
	(rule__Model__InstrumentsAssignment_1)*
	{ after(grammarAccess.getModelAccess().getInstrumentsAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__COMMENT__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__COMMENT__Group__0__Impl
	rule__COMMENT__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__COMMENT__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCOMMENTAccess().getLeftParenthesisKeyword_0()); }
	'('
	{ after(grammarAccess.getCOMMENTAccess().getLeftParenthesisKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__COMMENT__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__COMMENT__Group__1__Impl
	rule__COMMENT__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__COMMENT__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCOMMENTAccess().getCommentKeyword_1()); }
	'comment'
	{ after(grammarAccess.getCOMMENTAccess().getCommentKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__COMMENT__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__COMMENT__Group__2__Impl
	rule__COMMENT__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__COMMENT__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCOMMENTAccess().getNameAssignment_2()); }
	(rule__COMMENT__NameAssignment_2)
	{ after(grammarAccess.getCOMMENTAccess().getNameAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__COMMENT__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__COMMENT__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__COMMENT__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCOMMENTAccess().getRightParenthesisKeyword_3()); }
	')'
	{ after(grammarAccess.getCOMMENTAccess().getRightParenthesisKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__INSTRUMENTS__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__INSTRUMENTS__Group__0__Impl
	rule__INSTRUMENTS__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__INSTRUMENTS__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getINSTRUMENTSAccess().getINSTRUMENTParserRuleCall_0()); }
	ruleINSTRUMENT
	{ after(grammarAccess.getINSTRUMENTSAccess().getINSTRUMENTParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__INSTRUMENTS__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__INSTRUMENTS__Group__1__Impl
	rule__INSTRUMENTS__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__INSTRUMENTS__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getINSTRUMENTSAccess().getGroup_1()); }
	(rule__INSTRUMENTS__Group_1__0)*
	{ after(grammarAccess.getINSTRUMENTSAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__INSTRUMENTS__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__INSTRUMENTS__Group__2__Impl
	rule__INSTRUMENTS__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__INSTRUMENTS__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getINSTRUMENTSAccess().getColonKeyword_2()); }
	':'
	{ after(grammarAccess.getINSTRUMENTSAccess().getColonKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__INSTRUMENTS__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__INSTRUMENTS__Group__3__Impl
	rule__INSTRUMENTS__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__INSTRUMENTS__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getINSTRUMENTSAccess().getLineFeedKeyword_3()); }
	('\n')*
	{ after(grammarAccess.getINSTRUMENTSAccess().getLineFeedKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__INSTRUMENTS__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__INSTRUMENTS__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__INSTRUMENTS__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getINSTRUMENTSAccess().getNameAssignment_4()); }
	(rule__INSTRUMENTS__NameAssignment_4)
	{ after(grammarAccess.getINSTRUMENTSAccess().getNameAssignment_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__INSTRUMENTS__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__INSTRUMENTS__Group_1__0__Impl
	rule__INSTRUMENTS__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__INSTRUMENTS__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getINSTRUMENTSAccess().getSolidusKeyword_1_0()); }
	'/'
	{ after(grammarAccess.getINSTRUMENTSAccess().getSolidusKeyword_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__INSTRUMENTS__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__INSTRUMENTS__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__INSTRUMENTS__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getINSTRUMENTSAccess().getINSTRUMENTParserRuleCall_1_1()); }
	ruleINSTRUMENT
	{ after(grammarAccess.getINSTRUMENTSAccess().getINSTRUMENTParserRuleCall_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Tempo__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Tempo__Group__0__Impl
	rule__Tempo__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Tempo__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTempoAccess().getLeftParenthesisKeyword_0()); }
	'('
	{ after(grammarAccess.getTempoAccess().getLeftParenthesisKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Tempo__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Tempo__Group__1__Impl
	rule__Tempo__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Tempo__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTempoAccess().getTempoKeyword_1()); }
	'tempo'
	{ after(grammarAccess.getTempoAccess().getTempoKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Tempo__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Tempo__Group__2__Impl
	rule__Tempo__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Tempo__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTempoAccess().getExclamationMarkKeyword_2()); }
	('!')?
	{ after(grammarAccess.getTempoAccess().getExclamationMarkKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Tempo__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Tempo__Group__3__Impl
	rule__Tempo__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Tempo__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTempoAccess().getNameAssignment_3()); }
	(rule__Tempo__NameAssignment_3)
	{ after(grammarAccess.getTempoAccess().getNameAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Tempo__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Tempo__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Tempo__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTempoAccess().getRightParenthesisKeyword_4()); }
	')'
	{ after(grammarAccess.getTempoAccess().getRightParenthesisKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Quant__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Quant__Group__0__Impl
	rule__Quant__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Quant__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getQuantAccess().getLeftParenthesisKeyword_0()); }
	'('
	{ after(grammarAccess.getQuantAccess().getLeftParenthesisKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Quant__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Quant__Group__1__Impl
	rule__Quant__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Quant__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getQuantAccess().getQuantKeyword_1()); }
	'quant'
	{ after(grammarAccess.getQuantAccess().getQuantKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Quant__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Quant__Group__2__Impl
	rule__Quant__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Quant__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getQuantAccess().getExclamationMarkKeyword_2()); }
	('!')?
	{ after(grammarAccess.getQuantAccess().getExclamationMarkKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Quant__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Quant__Group__3__Impl
	rule__Quant__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Quant__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getQuantAccess().getNameAssignment_3()); }
	(rule__Quant__NameAssignment_3)
	{ after(grammarAccess.getQuantAccess().getNameAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Quant__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Quant__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Quant__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getQuantAccess().getRightParenthesisKeyword_4()); }
	')'
	{ after(grammarAccess.getQuantAccess().getRightParenthesisKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Volume__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Volume__Group__0__Impl
	rule__Volume__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Volume__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVolumeAccess().getLeftParenthesisKeyword_0()); }
	'('
	{ after(grammarAccess.getVolumeAccess().getLeftParenthesisKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Volume__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Volume__Group__1__Impl
	rule__Volume__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Volume__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVolumeAccess().getVolumeKeyword_1()); }
	'volume'
	{ after(grammarAccess.getVolumeAccess().getVolumeKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Volume__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Volume__Group__2__Impl
	rule__Volume__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Volume__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVolumeAccess().getExclamationMarkKeyword_2()); }
	('!')?
	{ after(grammarAccess.getVolumeAccess().getExclamationMarkKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Volume__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Volume__Group__3__Impl
	rule__Volume__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Volume__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVolumeAccess().getNameAssignment_3()); }
	(rule__Volume__NameAssignment_3)
	{ after(grammarAccess.getVolumeAccess().getNameAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Volume__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Volume__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Volume__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVolumeAccess().getRightParenthesisKeyword_4()); }
	')'
	{ after(grammarAccess.getVolumeAccess().getRightParenthesisKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__KeySignature__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__KeySignature__Group__0__Impl
	rule__KeySignature__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__KeySignature__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getKeySignatureAccess().getLeftParenthesisKeyword_0()); }
	'('
	{ after(grammarAccess.getKeySignatureAccess().getLeftParenthesisKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__KeySignature__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__KeySignature__Group__1__Impl
	rule__KeySignature__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__KeySignature__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getKeySignatureAccess().getKeySignatureKeyword_1()); }
	'key-signature'
	{ after(grammarAccess.getKeySignatureAccess().getKeySignatureKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__KeySignature__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__KeySignature__Group__2__Impl
	rule__KeySignature__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__KeySignature__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getKeySignatureAccess().getExclamationMarkKeyword_2()); }
	('!')?
	{ after(grammarAccess.getKeySignatureAccess().getExclamationMarkKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__KeySignature__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__KeySignature__Group__3__Impl
	rule__KeySignature__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__KeySignature__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getKeySignatureAccess().getNameAssignment_3()); }
	(rule__KeySignature__NameAssignment_3)
	{ after(grammarAccess.getKeySignatureAccess().getNameAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__KeySignature__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__KeySignature__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__KeySignature__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getKeySignatureAccess().getRightParenthesisKeyword_4()); }
	')'
	{ after(grammarAccess.getKeySignatureAccess().getRightParenthesisKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Model__DeclarationsAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getModelAccess().getDeclarationsDECLRATIONSParserRuleCall_0_0()); }
		ruleDECLRATIONS
		{ after(grammarAccess.getModelAccess().getDeclarationsDECLRATIONSParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__InstrumentsAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getModelAccess().getInstrumentsINSTRUMENTSParserRuleCall_1_0()); }
		ruleINSTRUMENTS
		{ after(grammarAccess.getModelAccess().getInstrumentsINSTRUMENTSParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__COMMENT__NameAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCOMMENTAccess().getNameSTRINGTerminalRuleCall_2_0()); }
		RULE_STRING
		{ after(grammarAccess.getCOMMENTAccess().getNameSTRINGTerminalRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__INSTRUMENTS__NameAssignment_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getINSTRUMENTSAccess().getNameNOTESTerminalRuleCall_4_0()); }
		RULE_NOTES
		{ after(grammarAccess.getINSTRUMENTSAccess().getNameNOTESTerminalRuleCall_4_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Tempo__NameAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTempoAccess().getNameINTTerminalRuleCall_3_0()); }
		RULE_INT
		{ after(grammarAccess.getTempoAccess().getNameINTTerminalRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Quant__NameAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getQuantAccess().getNameINTTerminalRuleCall_3_0()); }
		RULE_INT
		{ after(grammarAccess.getQuantAccess().getNameINTTerminalRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Volume__NameAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVolumeAccess().getNameINTTerminalRuleCall_3_0()); }
		RULE_INT
		{ after(grammarAccess.getVolumeAccess().getNameINTTerminalRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__KeySignature__NameAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getKeySignatureAccess().getNameNOTESTerminalRuleCall_3_0()); }
		RULE_NOTES
		{ after(grammarAccess.getKeySignatureAccess().getNameNOTESTerminalRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

RULE_ML_COMMENT : '#' ( options {greedy=false;} : . )*'\n';

RULE_NOTES : (('o'|'r') ('1'..'9')* ' ')? ('a'|'b'|'c'|'d'|'e'|'f'|'g') ('-'|'+')? ('1'..'9')* ('~'|'/'|'.'|' '|'|'|'*'|'<'|'>'|'-'|'.~' '1'..'9')* ((('o'|'r') ('1'..'9')* ' ')? ('a'|'b'|'c'|'d'|'e'|'f'|'g') ('-'|'+')? ('1'..'9')* ('~'|'/'|'.'|' '|'|'|'*'|'<'|'>'|'-'|'.~' '1'..'9')*)*;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
